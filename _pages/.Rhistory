# Perform the analysis
kids_participant <- kids.new %>%
# Summarize responses at the participant level
group_by(participant, age, condition, trial_type) %>%
dplyr::summarise(
total = sum(n),                        # Total number of responses
yes_count = sum(n[response == "yes"]), # Number of 'yes' responses
proportion_yes = yes_count / total,    # Proportion of 'yes' responses
.groups = 'drop'
) %>%
# Aggregate at the age and condition level
group_by(participant, age, condition, trial_type) %>%
dplyr::summarise(
mean_proportion = mean(proportion_yes),       # Mean proportion of 'yes'
SD = sd(proportion_yes),                      # Standard deviation
SE = SD / sqrt(n()),                          # Standard error
.groups = 'drop'
)
chance_level <- 0.5
# Perform t-tests for each age and condition
t_test_results <- kids_participant %>%
group_by(age, condition) %>%
summarise(
t_test = list(t.test(mean_proportion, mu = chance_level)),  # Run t-test
.groups = 'drop'
) %>%
mutate(
t_statistic = map_dbl(t_test, ~ .x$statistic),
df = t_test[[1]]$parameter, # Extract t-statistic
p_value = map_dbl(t_test, ~ .x$p.value),         # Extract p-value
# conf_low = map_dbl(t_test, ~ .x$conf.int[1]),    # Lower bound of CI
#conf_high = map_dbl(t_test, ~ .x$conf.int[2])    # Upper bound of CI
) %>%
select(-t_test)  # Remove the t-test list column for clarity
# View results
print(t_test_results)
# Perform the analysis
kids_participant <- kids.new %>%
# Summarize responses at the participant level
group_by(participant, age, condition, trial_type) %>%
dplyr::summarise(
total = sum(n),                        # Total number of responses
yes_count = sum(n[response == "yes"]), # Number of 'yes' responses
proportion_yes = yes_count / total,    # Proportion of 'yes' responses
.groups = 'drop'
) %>%
# Aggregate at the age and condition level
group_by(age, condition, trial_type) %>%
dplyr::summarise(
mean_proportion = mean(proportion_yes),       # Mean proportion of 'yes'
SD = sd(proportion_yes),                      # Standard deviation
SE = SD / sqrt(n()),                          # Standard error
.groups = 'drop'
)
chance_level <- 0.5
# Perform t-tests for each age and condition
t_test_results <- kids_participant %>%
group_by(age, condition) %>%
summarise(
t_test = list(t.test(mean_proportion, mu = chance_level)),  # Run t-test
.groups = 'drop'
) %>%
mutate(
t_statistic = map_dbl(t_test, ~ .x$statistic),
df = t_test[[1]]$parameter, # Extract t-statistic
p_value = map_dbl(t_test, ~ .x$p.value),         # Extract p-value
# conf_low = map_dbl(t_test, ~ .x$conf.int[1]),    # Lower bound of CI
#conf_high = map_dbl(t_test, ~ .x$conf.int[2])    # Upper bound of CI
) %>%
select(-t_test)  # Remove the t-test list column for clarity
# View results
print(t_test_results)
# Perform t-tests for each age and condition
# Perform t-tests on participant-level data before aggregating
t_test_results <- kids_participant %>%
group_by(age, condition, trial_type) %>%
summarise(
t_test = list(t.test(proportion_yes, mu = chance_level)),
.groups = 'drop'
) %>%
mutate(
t_statistic = map_dbl(t_test, ~ .x$statistic),
df = map_dbl(t_test, ~ .x$parameter),
p_value = map_dbl(t_test, ~ .x$p.value)
# conf_low = map_dbl(t_test, ~ .x$conf.int[1]),
# conf_high = map_dbl(t_test, ~ .x$conf.int[2])
) %>%
select(-t_test)
# Perform t-tests for each age and condition
# Perform t-tests on participant-level data before aggregating
t_test_results <- kids_participant %>%
group_by(age, condition, trial_type) %>%
summarise(
t_test = list(t.test(proportion, mu = chance_level)),
.groups = 'drop'
) %>%
mutate(
t_statistic = map_dbl(t_test, ~ .x$statistic),
df = map_dbl(t_test, ~ .x$parameter),
p_value = map_dbl(t_test, ~ .x$p.value)
# conf_low = map_dbl(t_test, ~ .x$conf.int[1]),
# conf_high = map_dbl(t_test, ~ .x$conf.int[2])
) %>%
select(-t_test)
# Perform t-tests for each age and condition
# Perform t-tests on participant-level data before aggregating
t_test_results <- kids_participant %>%
group_by(age, condition, trial_type) %>%
summarise(
t_test = list(t.test(proportion_yes, mu = chance_level)),
.groups = 'drop'
) %>%
mutate(
t_statistic = map_dbl(t_test, ~ .x$statistic),
df = map_dbl(t_test, ~ .x$parameter),
p_value = map_dbl(t_test, ~ .x$p.value)
# conf_low = map_dbl(t_test, ~ .x$conf.int[1]),
# conf_high = map_dbl(t_test, ~ .x$conf.int[2])
) %>%
select(-t_test)
# Perform the analysis
kids_participant <- kids.new %>%
# Summarize responses at the participant level
group_by(participant, age, condition, trial_type) %>%
dplyr::summarise(
total = sum(n),                        # Total number of responses
yes_count = sum(n[response == "yes"]), # Number of 'yes' responses
proportion_yes = yes_count / total,    # Proportion of 'yes' responses
.groups = 'drop'
) %>%
# Aggregate at the age and condition level
group_by(age, condition, trial_type) %>%
dplyr::summarise(
mean_proportion = mean(proportion_yes),       # Mean proportion of 'yes'
SD = sd(proportion_yes),                      # Standard deviation
SE = SD / sqrt(n()),                          # Standard error
.groups = 'drop'
)
chance_level <- 0.5
# Perform t-tests for each age and condition
# Perform t-tests on participant-level data before aggregating
t_test_results <- kids_participant %>%
group_by(age, condition, trial_type) %>%
summarise(
t_test = list(t.test(proportion_yes, mu = chance_level)),
.groups = 'drop'
) %>%
mutate(
t_statistic = map_dbl(t_test, ~ .x$statistic),
df = map_dbl(t_test, ~ .x$parameter),
p_value = map_dbl(t_test, ~ .x$p.value)
# conf_low = map_dbl(t_test, ~ .x$conf.int[1]),
# conf_high = map_dbl(t_test, ~ .x$conf.int[2])
) %>%
select(-t_test)
# Perform the analysis
kids_participant <- kids.new %>%
# Summarize responses at the participant level
group_by(participant, age, condition, trial_type) %>%
dplyr::summarise(
total = sum(n),                        # Total number of responses
yes_count = sum(n[response == "yes"]), # Number of 'yes' responses
proportion_yes = yes_count / total,    # Proportion of 'yes' responses
.groups = 'drop'
) %>%
# Aggregate at the age and condition level
group_by(participant, age, condition, trial_type) %>%
dplyr::summarise(
mean_proportion_yes = mean(proportion_yes),       # Mean proportion of 'yes'
SD = sd(proportion_yes),                      # Standard deviation
SE = SD / sqrt(n()),                          # Standard error
.groups = 'drop'
)
chance_level <- 0.5
# Perform t-tests for each age and condition
# Perform t-tests on participant-level data before aggregating
t_test_results <- kids_participant %>%
group_by(age, condition, trial_type) %>%
summarise(
t_test = list(t.test(proportion_yes, mu = chance_level)),
.groups = 'drop'
) %>%
mutate(
t_statistic = map_dbl(t_test, ~ .x$statistic),
df = map_dbl(t_test, ~ .x$parameter),
p_value = map_dbl(t_test, ~ .x$p.value)
# conf_low = map_dbl(t_test, ~ .x$conf.int[1]),
# conf_high = map_dbl(t_test, ~ .x$conf.int[2])
) %>%
select(-t_test)
# View results
print(t_test_results)
# Perform t-tests for each age and condition
# Perform t-tests on participant-level data before aggregating
t_test_results <- kids_participant %>%
group_by(age, condition, trial_type) %>%
summarise(
t_test = list(t.test(mean_proportion_yes, mu = chance_level)),
.groups = 'drop'
) %>%
mutate(
t_statistic = map_dbl(t_test, ~ .x$statistic),
df = map_dbl(t_test, ~ .x$parameter),
p_value = map_dbl(t_test, ~ .x$p.value)
# conf_low = map_dbl(t_test, ~ .x$conf.int[1]),
# conf_high = map_dbl(t_test, ~ .x$conf.int[2])
) %>%
select(-t_test)
# View results
print(t_test_results)
# Step 1: Count individual responses
kids_summary <- kids %>%
group_by(participant, age, condition, trial_type, response) %>%
summarise(n = n(), .groups = "drop")
# Step 1: Count individual responses
kids_summary <- kids %>%
group_by(participant, age, condition, trial_type, response) %>%
dplyr::summarise(n = n(), .groups = "drop")
# Step 2: Calculate proportion of "yes" for each participant
kids_participant <- kids_summary %>%
group_by(participant, age, condition, trial_type) %>%
summarise(
total = sum(n),
yes_count = sum(n[response == "yes"]),
proportion_yes = yes_count / total,
.groups = "drop"
)
# Step 3: Perform t-tests at the participant level
chance_level <- 0.5
t_test_results <- kids_participant %>%
group_by(age, condition, trial_type) %>%
summarise(
t_test = list(t.test(proportion_yes, mu = chance_level)),
.groups = "drop"
) %>%
mutate(
t_statistic = map_dbl(t_test, ~ .x$statistic),
df = map_dbl(t_test, ~ .x$parameter),
p_value = map_dbl(t_test, ~ .x$p.value)
# You can add conf intervals if needed
) %>%
select(-t_test)
# Step 2: Calculate proportion of "yes" for each participant
kids_participant <- kids_summary %>%
group_by(participant, age, condition, trial_type) %>%
dplyr::summarise(
total = sum(n),
yes_count = sum(n[response == "yes"]),
proportion_yes = yes_count / total,
.groups = "drop"
)
# Step 3: Perform t-tests at the participant level
chance_level <- 0.5
t_test_results <- kids_participant %>%
group_by(age, condition, trial_type) %>%
summarise(
t_test = list(t.test(proportion_yes, mu = chance_level)),
.groups = "drop"
) %>%
mutate(
t_statistic = map_dbl(t_test, ~ .x$statistic),
df = map_dbl(t_test, ~ .x$parameter),
p_value = map_dbl(t_test, ~ .x$p.value)
# You can add conf intervals if needed
) %>%
select(-t_test)
print(t_test_results)
t_test_results <- kids_participant %>%
group_by(age, condition, trial_type) %>%
dplyr::summarise(
t_test = list(t.test(proportion_yes, mu = chance_level)),
.groups = "drop"
) %>%
mutate(
t_statistic = map_dbl(t_test, ~ .x$statistic),
df = map_dbl(t_test, ~ .x$parameter),
p_value = map_dbl(t_test, ~ .x$p.value)
# You can add conf intervals if needed
) %>%
select(-t_test)
adults <- read.csv('adults.csv')
kids <- read.csv('cp_kids_july27fin.csv')
adults <- read.csv('adults-std-bis.csv')
kids <- rbind(adults, kids)
kids <- kids %>%
dplyr::mutate(attention_check = ifelse(response== "yes" & corr_answer == "yes", "1",
ifelse(response== "no" & corr_answer == "no", "1",
ifelse(corr_answer=="depends", "depends", "0"))))
kids %>%
filter(condition=='standard') %>%
group_by(age) %>%
dplyr::summarise(n=n()/11) #21, #20, #13, #20 --> 20, 20, 5
kids %>%
filter(condition=='biscuit') %>%  #22, #21, #12, #20 --> 21, 20, 10
group_by(age ) %>%
dplyr::summarise(n=n()/9)
kids <- kids %>%
mutate(attention_check=as.numeric(attention_check))
attention_check_kids <- kids %>%
group_by(participant, trial, age, condition) %>%
filter(attention_check!='NA') %>%
dplyr::summarize(sum=sum(attention_check))
#filter out attention failure kids
kids <- kids %>%
filter(participant!=10) %>%  #attention fail, biscuit 5
filter(participant!=36) %>%  #attention fail, standard 4
filter(participant!=58) %>%  #attention fail, biscuit 4
filter(participant!=99)   #biscuit 6
kids <- kids %>%
mutate(resp = ifelse(response=='yes', "1", ifelse(response=='no', "0","0")))
kids <- kids %>%
dplyr::mutate(comp_check = ifelse(response== "no" & corr_answer == "no", "1",
ifelse(response== "yes" & corr_answer == "yes", "1",
ifelse(corr_answer=="depends", "depends", "0"))))
kids <- kids %>%
filter(trial!='attention')
kids <- kids %>%
mutate(resp=as.factor(resp))
kids <- kids %>%
mutate(age=as.factor(age))
# Ensure response is a character column
kids$response <- as.character(kids$response)
library(dplyr)
library(purrr)
# Step 1: Count individual responses
kids_summary <- kids %>%
group_by(participant, age, condition, trial_type, response) %>%
dplyr::summarise(n = n(), .groups = "drop")
# Step 2: Calculate proportion of "yes" for each participant
kids_participant <- kids_summary %>%
group_by(participant, age, condition, trial_type) %>%
dplyr::summarise(
total = sum(n),
yes_count = sum(n[response == "yes"]),
proportion_yes = yes_count / total,
.groups = "drop"
)
# Step 3: Perform t-tests at the participant level
chance_level <- 0.5
t_test_results <- kids_participant %>%
group_by(age, condition, trial_type) %>%
summarise(
t_test = list(t.test(proportion_yes, mu = chance_level)),
.groups = "drop"
) %>%
mutate(
t_statistic = map_dbl(t_test, ~ .x$statistic),
df = map_dbl(t_test, ~ .x$parameter),
p_value = map_dbl(t_test, ~ .x$p.value)
# You can add conf intervals if needed
) %>%
select(-t_test)
print(t_test_results)
kids_participant %>%
group_by(age, condition, trial_type) %>%
summarise(
t_test = list(t.test(proportion_yes, mu = chance_level)),
.groups = "drop"
) %>%
mutate(
t_statistic = map_dbl(t_test, ~ .x$statistic),
df = map_dbl(t_test, ~ .x$parameter),
p_value = map_dbl(t_test, ~ .x$p.value)
# You can add conf intervals if needed
) %>%
select(-t_test)
# Step 1: Count individual responses
kids_summary <- kids %>%
group_by(participant, age, condition, trial_type, response) %>%
dplyr::summarise(n = n(), .groups = "drop")
View(kids_summary)
# Step 2: Calculate proportion of "yes" for each participant
kids_participant <- kids_summary %>%
group_by(participant, age, condition, trial_type) %>%
dplyr::summarise(
total = sum(n),
yes_count = sum(n[response == "yes"]),
proportion_yes = yes_count / total,
.groups = "drop"
)
View(kids_participant)
# Step 3: Perform t-tests at the participant level
chance_level <- 0.5
t_test_results <- kids_participant %>%
group_by(age, condition, trial_type) %>%
summarise(
t_test = list(t.test(proportion_yes, mu = chance_level)),
.groups = "drop"
) %>%
mutate(
t_statistic = map_dbl(t_test, ~ .x$statistic),
df = map_dbl(t_test, ~ .x$parameter),
p_value = map_dbl(t_test, ~ .x$p.value)
# You can add conf intervals if needed
) %>%
select(-t_test)
print(t_test_results)
t_test_results <- kids_participant %>%
group_by(age, condition, trial_type) %>%
summarise(
# Wrap t-test in tryCatch to avoid breaking on small or NA-only groups
t_test = list(
tryCatch(
t.test(proportion_yes, mu = chance_level),
error = function(e) NULL
)
),
.groups = "drop"
) %>%
# Remove groups where t-test failed (NULL)
filter(!map_lgl(t_test, is.null)) %>%
mutate(
t_statistic = map_dbl(t_test, ~ .x$statistic),
df = map_dbl(t_test, ~ .x$parameter),
p_value = map_dbl(t_test, ~ .x$p.value)
) %>%
select(age, condition, trial_type, t_statistic, df, p_value)
t_test_results <- kids_participant %>%
group_by(age, condition, trial_type) %>%
summarise(
# Wrap t-test in tryCatch to avoid breaking on small or NA-only groups
t_test = list(
tryCatch(
t.test(proportion_yes, mu = chance_level),
error = function(e) NULL
)
),
.groups = "drop"
) %>%
# Remove groups where t-test failed (NULL)
filter(!map_lgl(t_test, is.null)) %>%
mutate(
t_statistic = map_dbl(t_test, ~ .x$statistic),
df = map_dbl(t_test, ~ .x$parameter),
p_value = map_dbl(t_test, ~ .x$p.value)
)
print(t_test_results)
t_test_results <- kids_participant %>%
group_by(age, condition, trial_type) %>%
dplyr::summarise(
t_test = list(t.test(proportion_yes, mu = chance_level)),
.groups = "drop"
) %>%
mutate(
t_statistic = map_dbl(t_test, ~ .x$statistic),
df = map_dbl(t_test, ~ .x$parameter),
p_value = map_dbl(t_test, ~ .x$p.value)
# You can add conf intervals if needed
) %>%
select(-t_test)
kids <- kids %>%
mutate(resp=as.factor(resp))
kids <- kids %>%
mutate(age=as.factor(age))
# Ensure response is a character column
kids$response <- as.character(kids$response)
# Step 1: Count individual responses
kids_summary <- kids %>%
group_by(participant, age, condition, trial_type, response) %>%
dplyr::summarise(n = n(), .groups = "drop")
# Step 2: Calculate proportion of "yes" for each participant
kids_participant <- kids_summary %>%
group_by(participant, age, condition, trial_type) %>%
dplyr::summarise(
total = sum(n),
yes_count = sum(n[response == "yes"]),
proportion_yes = yes_count / total,
.groups = "drop"
)
# Step 3: Perform t-tests at the participant level
chance_level <- 0.5
t_test_results <- kids_participant %>%
group_by(age, condition, trial_type) %>%
summarise(
t_test = list(t.test(proportion_yes, mu = chance_level)),
.groups = "drop"
) %>%
mutate(
t_statistic = map_dbl(t_test, ~ .x$statistic),
df = map_dbl(t_test, ~ .x$parameter),
p_value = map_dbl(t_test, ~ .x$p.value)
# You can add conf intervals if needed
) %>%
select(-t_test)
print(t_test_results)
t_test_results <- kids_participant %>%
group_by(age, condition, trial_type) %>%
summarise(
t_test = list(t.test(proportion_yes, mu = chance_level))
) %>%
mutate(
t_statistic = map_dbl(t_test, ~ .x$statistic),
df = map_dbl(t_test, ~ .x$parameter),
p_value = map_dbl(t_test, ~ .x$p.value)
# You can add conf intervals if needed
) %>%
select(-t_test)
print(t_test_results)
t_test_results <- kids_participant %>%
group_by(participant, age, condition, trial_type) %>%
summarise(
t_test = list(t.test(proportion_yes, mu = chance_level)),
.groups = "drop"
) %>%
mutate(
t_statistic = map_dbl(t_test, ~ .x$statistic),
df = map_dbl(t_test, ~ .x$parameter),
p_value = map_dbl(t_test, ~ .x$p.value)
# You can add conf intervals if needed
) %>%
select(-t_test)
print(t_test_results)
